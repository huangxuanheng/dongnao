worker_processes  1;
events {
    worker_connections 1024;
}

http {
    # 设置由set_by_lua， content_by_lua等指定的脚本使用的Lua模块搜索路径。类似java的classPath
    # 路径字符串采用标准的Lua路径形式，;; 可用于代表原始搜索路径。
	lua_package_path "/usr/local/openresty/lua_scripts/?.lua;;";

    # 申请一个名为dogs的10m字典内存，共享在所有工作进程中
    lua_shared_dict dogs 10m;

    
    # 在服务器启动时预加载Lua模块，并利用现代操作系统的写时复制（COW）优化。
    init_by_lua_block {
        -- 预加载json模块
        require "cjson"

        -- 操作共享内存
        local dogs = ngx.shared.dogs;
        dogs:set("Tom", 56)
    }

    server {
        listen 8080;
        location /lua {
            default_type text/html;

            # 在location、location if上下文中使用。充当“内容处理程序”并执行指定的lua脚本内容，
            # Lua代码可以进行API调用，并在独立的全局环境（即沙箱）中作为新的衍生协程执行
            content_by_lua_block {
                local mydata = require "mydata"
                ngx.say(mydata.get_age("dog"))

                -- require关键字会返回init_by_lua_block中已经预加载了cjson模块
                ngx.say(require "cjson".encode{dog = 5, cat = 6})

                -- 读取共享内存中的信息
                local dogs = ngx.shared.dogs;
                ngx.say(dogs:get("Tom"))
            }
        }
    }
}