#！/bin/bash
# shell 脚本参数传递说明
# $$ 	脚本运行的当前进程ID号
# $# 	传递到脚本的参数个数
# $- 	显示Shell使用的当前选项，与set命令功能相同。
# $! 	后台运行的最后一个进程的ID号
# $@ 	与$*相同，但是使用时加引号，并在引号中返回每个参数。
#		如"$@"用""双引号括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
#		"$@"仍然将每个参数都看作一份数据，彼此之间是独立的。
#		
# $* 	以一个单字符串显示所有向脚本传递的参数。
#		如"$*"用""双引号括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
#		"$*"会将所有的参数从整体上看做一份数据，而不是把每个参数都看做一份数据
#		
# $?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
# 		也可以用来获取函数返回值，后面会针对特殊的返回结果值给出示例
# $0	当前文件名
# window系统中写的shell脚本，出现‘$’\r’: 未找到命令’错误，解决办法
# yum install dos2unix
# dos2unix xxx.sh
# 再执行，不再报错
echo "当前执行的文件：$0"
echo "当前脚本的第一个参数：$1"
echo "当前脚本的第二个参数：$2"
echo "当前运行的进程ID号：$$"
echo "后台运行的最后一个进程的ID号：$!"
echo "传递到脚本的参数个数：$#"
echo "输出所有参数，每个参数独立：$@"
echo "print each param form \"\$@\""
for var in "$@"
do
	echo "$var"
done

echo "输出所有参数，参数不独立：$*"
echo "print each param form \"\$*\""
for var in "$*"
do
	echo "$var"
done

echo "显示最后命令的退出状态：$?"

arg2="aa"
if [ -n "$2" ] ; then
	arg2="$2"
fi
echo "第二个参数"$arg2

for var in $arg2
do 
	echo "$var"
done

